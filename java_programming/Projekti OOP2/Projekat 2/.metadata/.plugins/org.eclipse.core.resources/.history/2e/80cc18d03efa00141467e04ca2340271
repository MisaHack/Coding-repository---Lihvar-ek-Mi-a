package bean;

import java.sql.Timestamp;
import java.util.logging.Logger;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.PostConstruct;
import javax.ejb.LocalBean;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import entity.CommentG3;
import entity.TweetG3;
import entity.UserG3;


/**
 * Klasa sluzi za popunjavanje baze podataka sa unapred definisanim
 * podacima kako bi aplikacija bila spremna za upotrebu po startovanju.
 * 
 * @author <a href="mailto:lihvarcekmisa@yahoo.com">Lihvarcek Misa</a>
 *
 */

//treba nam samo jedna instanca klase iz koje cemo
//izvlaciti podatke pa zato @Singleton
@Singleton
//lokalni bean
@LocalBean
//podaci ce biti inject-ovani odmah po startovanju u bazu
@Startup
public class FillDatabaseG3 {
   //logger nam sluzi za ispis poruka o gresci u konzoli
   private static final Logger logger = Logger.getLogger(FillDatabaseG3.class.getName());
   //objekat pomocu koga se izvrsavaju operacije nad bazom.
   //vrednost polja "name" je naziv persistence-unit-a u fajlu
   //persistence.xml
   @PersistenceContext(name="TwitterServerProjectG3")
   private EntityManager em;
   
   //EJB komponente bi trebalo inicijalizovati u metodi oznacenoj sa
   //@PostConstruct(npr. polje "em" je jos uvek null u konstruktoru)
   @PostConstruct
   //metod moze da ima proizvoljan naziv
   public void postConstructG3(){
	  //prvo vrsimo proveru da li su podaci vec uneti ranije
	  if(em.find(UserG3.class, "@Misa") != null ){
		 logger.info("Podaci su vec uneti u bazu podataka.");
		 return;
	  }
	  
	  //ako podaci nisu uneti onda unosimo par User-a,Twitt-ova
	  //i Comment-a
	  
	  //prvi User
	  UserG3 user1 = createNewUser("@Misa", "Misa", "Lihvarcek", "lihvarcekmisa@yahoo.com",
			                        "Misa.png", "Programmer1", "000", "9.3.1990.");
	  
	  //drugi User
	  UserG3 user2 = createNewUser("@Nenad", "Nenad", "Barugdzic", 
			                        "bnenad@gmail.com", "Nenad.png", 
			                        "Programmer2", "111", "Unknown");
	  
	  //treci user
	  UserG3 user3 = createNewUser("@Nemanja", "Nemanja", "Dragin", 
                                   "dnemanja@gmail.com", "Nemanja.png", 
                                   "Programmer3", "222", "Unknown");
	  
	  
	  
	  //prvi twitt
	  TweetG3 twitt1 = createNewTwitt(1,"Hello World",createDate(1, 3, 2015));
	  //drugi twitt
	  TweetG3 twitt2 = createNewTwitt(2, "Zdravo svete",createDate(1, 4, 2014));
	  
	  
	  //prvi komentar 
	  CommentG3 comment1 = createNewComment(1, "Firste Comment");
	  //drugi komentar
	  CommentG3 comment2 = createNewComment(2, "Second Comment")
	  
   }
   
   /**
    * Pomocni metod kojim pravimo novog korisnika,
    * sa svim njegovim podacima.
    * 
    * @param tweetname - jedinstveno ime User-a na twitter-u
    * @param name - pravo ime korisnika
    * @param surname - prezime korisnika
    * @param email - email adresa korisnika
    * @param avatar - profilna slika korisnika
    * @param about  - kratak opis korisnika (hobiji itd.)
    * @param password - sifra za loggin korisnika
    * @param birthdate - datum rodjenja korisnika
    * 
    * @return new User
    */
   public UserG3 createNewUser(String tweetname,String name,String surname,
		                    String email,String avatar,String about,
		                    String password,String birthdate){
	  
	  UserG3 user = new UserG3();
	  user.setTweetname(tweetname);
	  user.setName(name);
	  user.setSurname(surname);
	  user.setEmail(email);
	  user.setAvatar(avatar);
	  user.setAbout(about);
	  user.setPassword(password);
	  user.setBirtdate(birthdate);
	  
	  return user;
   }
   
   /**
    * Pomocni metod kojim pravimo novi Tweet sa
    * svim informacijama koje sadrzi.
    * 
    * @param twitt_id - jedinstveni broj twitt-a
    * @param twittText - sadrzaj poruke koju nosi twitt
    * @param createDate - datum kreiranja twitt-a
    * 
    * @return new Twitt
    */
   public TweetG3 createNewTwitt(int twitt_id,String twittText,
		                      Date createDate){
	   
	   TweetG3 twitt = new TweetG3();
	   twitt.setTweet_id(twitt_id);
	   twitt.setTweetText(twittText);
	   twitt.setCreateDate(createDate);
	   
	   return twitt;
   }
   
   
   /**
    * Pomocni metod kojim pravimo novi komentar sa pratecom porukom.
    * 
    * @param comment_id - jedinstvena identifikacija komentara
    * @param commentText - tekst komentara
    * 
    * @return new Comment
    */
   public CommentG3 createNewComment(int comment_id,String commentText){
	  CommentG3 comment = new CommentG3();
	  comment.setComment_id(comment_id);
	  comment.setCommentText(commentText);
	  
	  return comment;
   }
   
   /**
    * Pomocni metod kojim kreiramo datum postavljanja twitt-a.
    * 
    * @param date - dan kada je twitt postavljen
    * @param month - mesec kada je twitt postavljen
    * @param year - godina  kada je twitt postavljen
    * 
    * @return new Date
    */
   public Date createDate(int date,int month,int year){
	  Calendar c = Calendar.getInstance();
	  c.set(year, month, date);
	  
	  Date d = c.getTime();
	  
	  return d;
   }
}
